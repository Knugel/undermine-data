{"version":3,"sources":["store/Context.tsx","components/EntityListing/EntityListing.tsx","helpers/index.ts","store/Provider.tsx","components/Entity/ReferenceLink.tsx","components/Entity/Extensions/Extension.tsx","components/Entity/Entity.tsx","components/BehaviorTree/BehaviorTreeGraph.tsx","components/BehaviorTree/BehaviorTree.tsx","components/DataObjectListing/DataObjectListing.tsx","components/DataObject/DataObject.tsx","App.tsx","index.tsx"],"names":["Context","React","createContext","behaviors","entities","dataObjects","EntityListing","match","useRouteMatch","context","useContext","useState","search","setSearch","Form","style","padding","Control","type","placeholder","value","onChange","event","currentTarget","Table","striped","bordered","hover","filter","x","Name","toLowerCase","includes","sort","a","b","localeCompare","map","entity","Guid","textAlign","to","path","get","url","window","fetch","method","response","ok","json","Promise","reject","statusText","toFlowElement","task","parent","parentOffset","fromOffset","NodeData","Offset","y","offset","element","id","ID","toString","Children","undefined","position","data","label","Comment","Type","ret","child","concat","edge","source","target","push","split","replace","Number","parseFloat","types","beautify","index","indexOf","substr","toUpperCase","find","startsWith","length","Provider","props","store","setStore","useEffect","process","children","ReferenceLink","isGuid","isInteger","$Ref","isEntity","some","Extension","isReference","obj","isEmpty","values","Object","every","renderValue","Check","disabled","checked","Instance","keys","endsWith","key","entry","colSpan","Accordion","Card","Toggle","as","Header","eventKey","Collapse","Body","Entity","useParams","guid","name","setEntity","items","_","getComponent","component","Tabs","Tab","title","getTabs","BehaviorTreeGraph","nodeWidth","elements","setElements","selected","setSelected","dagreGraph","dagre","graphlib","Graph","setDefaultEdgeLabel","tasks","TaskJSON","JSON","parse","EntryTask","RootTask","direction","isHorizontal","setGraph","rankdir","forEach","el","isNode","setNode","width","height","setEdge","layout","nodeWithPosition","node","targetPosition","Position","Left","Top","sourcePosition","Right","Bottom","Math","random","nodeHeight","doLayout","Row","Col","nodesDraggable","onElementClick","xs","lg","overflow","overflowY","wordBreak","BehaviorTree","behavior","setBehavior","tmp","AutoStart","Interruptable","PauseWhenDisabled","PreProcess","RestartWhenComplete","Objects","DataObjectListing","dataObject","setDataObject","item","App","basename","Container","Navbar","bg","variant","expand","Brand","Nav","className","Link","NavLink","exact","DataObject","render","ReactDOM","document","getElementById"],"mappings":"sRAKeA,EAFCC,IAAMC,cAAqB,CAAEC,UAAW,GAAIC,SAAU,GAAIC,YAAa,K,yBC+CxEC,MA7Cf,WACI,IAAIC,EAAQC,cACNC,EAAUC,qBAAWV,GAC3B,EAA4BW,mBAAiB,IAA7C,mBAAOC,EAAP,KAAeC,EAAf,KAMA,OACI,eAAC,WAAD,WACI,cAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,QAAS,IAAxB,SACI,cAACF,EAAA,EAAKG,QAAN,CAAcC,KAAK,SAASC,YAAY,YAAYC,MAAOR,EAAQS,SAP9D,SAACC,GACdT,EAAUS,EAAMC,cAAcH,YAQ1B,eAACI,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAA7B,UACI,gCACA,+BACI,sCACA,sCACA,4BAGJ,gCAEIlB,EAAQL,SACHwB,QAAO,SAAAC,GAAC,OAAIA,EAAEC,KAAKC,cAAcC,SAASpB,EAAOmB,kBACjDE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEJ,KAAKM,cAAcD,EAAEL,SACtCO,KAAI,SAAAC,GACL,OACI,+BACI,6BAAMA,EAAOR,OACb,6BAAMQ,EAAOC,OACb,oBAAIxB,MAAO,CAAEyB,UAAW,UAAxB,SACI,cAAC,IAAD,CAAMC,GAAE,UAAOlC,EAAMmC,KAAb,YAAuBJ,EAAOC,KAA9B,YAAwCD,EAAOR,MAAvD,SAAmE,WAJjEQ,EAAOC,KAAOD,EAAOR,kB,0CC/BpD,SAAea,EAAtB,kC,4CAAO,WAAsBC,GAAtB,eAAAV,EAAA,sEACoBW,OAAOC,MAAMF,EAAK,CAAEG,OAAQ,QADhD,YACGC,EADH,QAESC,GAFT,gCAGcD,EAASE,OAHvB,wEAKQC,QAAQC,OAAOJ,EAASK,aALhC,6C,sBAcA,SAASC,EAAcC,EAAYC,GACtC,IAAMC,EAAyB,MAAVD,EAAiBE,EAAWF,EAAOG,SAASC,QAAU,CAAE/B,EAAG,EAAGgC,EAAG,GAChFC,EAASJ,EAAWH,EAAKI,SAASC,QAElCG,EAAgB,CAClBC,GAAIT,EAAKU,GAAGC,WACZhD,KAAMqC,EAAKY,cAAWC,EAAY,SAClCC,SAAU,CAAExC,EAAG4B,EAAa5B,EAAIiC,EAAOjC,EAAGgC,EAAGJ,EAAaI,EAAIC,EAAOD,GACrES,KAAM,CAAEC,MAAOhB,EAAKzB,KAAMyB,KAAK,aAAGiB,QAASjB,EAAKI,SAASa,SAAYjB,KAGxD,6CAAdA,EAAKkB,OACJV,EAAQ7C,KAAO,SAEnB,IAAIwD,EAAqB,CAACX,GAC1B,GAAGR,EAAKY,SAAU,CAAC,IAAD,gBACKZ,EAAKY,UADV,IACd,IAAI,EAAJ,qBAAkC,CAAC,IAAzBQ,EAAwB,QAC9BD,EAAMA,EAAIE,OAAOtB,EAAcqB,EAAOpB,IACtC,IAAMsB,EAAa,CACfb,GAAIT,EAAKU,GAAK,IAAMU,EAAMV,GAC1Ba,OAAQvB,EAAKU,GAAGC,WAChBa,OAAQJ,EAAMV,GAAGC,WACjBhD,KAAM,cAEVwD,EAAIM,KAAKH,IATC,+BAYlB,OAAOH,EAGJ,SAAShB,EAAWI,GACvB,IAAMmB,EAAQnB,EACToB,QAAQ,IAAK,IACbA,QAAQ,IAAK,IACbD,MAAM,KAGX,MAAO,CAAEpD,EAFCsD,OAAOC,WAAWH,EAAM,IAEtBpB,EADFsB,OAAOC,WAAWH,EAAM,KAUtC,IAAMI,EAAQ,CACV,YACA,aACA,cACA,eACA,gBACA,gBACA,mBACA,mBACA,eACA,UACA,SACA,QACA,QACA,SACA,SACA,UACA,UACA,OACA,aACA,SACA,aAGG,SAASC,EAASlE,GACrB,IAAImE,EAAQnE,EAAMoE,QAAQ,MACvBD,GAAS,IAERnE,GADAA,EAAQA,EAAMqE,OAAOF,EAAQ,IACf,GAAGG,cAAgBtE,EAAMqE,OAAO,IAElD,IAAMvE,EAAOmE,EAAMM,MAAK,SAAA9D,GAAC,OAAIT,EAAMwE,WAAW/D,MAM9C,OALGX,IAECE,GADAA,EAAQA,EAAMqE,OAAOvE,EAAK2E,SACZ,GAAGH,cAAgBtE,EAAMqE,OAAO,IAG3CrE,ECxEI0E,MAtBf,SAAkBC,GACd,MAA0BpF,mBAAgB,CAAER,UAAW,GAAIC,SAAU,GAAIC,YAAa,KAAtF,mBAAO2F,EAAP,KAAcC,EAAd,KAgBA,OAdAC,qBAAU,WAAM,4CACZ,kCAAAhE,EAAA,2DACO8D,EAAM5F,SAASyF,OAAS,GAD/B,wDAIUjD,EAAMuD,kBAJhB,SAK4BxD,EAAgBC,EAAM,wBALlD,cAKUzC,EALV,gBAM2BwC,EAAkBC,EAAM,uBANnD,cAMUxC,EANV,iBAO8BuC,EAAkBC,EAAM,0BAPtD,QAOUvC,EAPV,OAQI4F,EAAS,CAAE9F,YAAWC,WAAUC,gBARpC,6CADY,uBAAC,WAAD,wBAWZyC,MAIA,cAAC,EAAQgD,SAAT,CAAkB1E,MAAO4E,EAAzB,SAAiCD,EAAMK,Y,oCCgBhCC,MA/Bf,SAAuBN,GAAe,IAAD,MAM7BhC,EALEtD,EAAUC,qBAAWV,GAErBsG,GAAUnB,OAAOoB,UAAUR,EAAMS,MACjCC,EAAWhG,EAAQL,SAASsG,MAAK,SAAA7E,GAAC,OAAIA,EAAEU,OAASwD,EAAMS,QAW7D,OAPIzC,EADD0C,EACWhG,EAAQL,SAASuF,MAAK,SAAA9D,GAAC,OAAIA,EAAEU,OAASwD,EAAMS,QAE5C/F,EAAQJ,YAAYsF,MAAK,SAAA9D,GAAC,OAAIA,EAAEU,OAASwD,EAAMS,QAEzDF,IACAvC,EAAUtD,EAAQN,UAAUwF,MAAK,SAAA9D,GAAC,OAAIA,EAAEoC,KAAO8B,EAAMS,SAGrD,cAAC,WAAD,UAEQF,EACI,cAAC,WAAD,UAEQG,EAAW,cAAC,IAAD,CAAMhE,GAAE,oBAAesD,EAAMS,MAA7B,mBAAsCzC,SAAtC,aAAsC,EAASjC,OAAe,cAAC,IAAD,CAAMW,GAAE,wBAAmBsD,EAAMS,MAAjC,mBAA0CzC,SAA1C,aAA0C,EAASjC,SAGlI,cAAC,IAAD,CAAMW,GAAE,qBAAgBsD,EAAMS,MAA9B,mBAAuCzC,SAAvC,aAAuC,EAASjC,UC+DvD6E,MArFf,SAASA,EAAUZ,GACf,IH8C0BzD,EG9CpBsE,EAAc,SAACC,GACjB,MAAkB,kBAARA,GAA2B,MAAPA,GAEvB,SAAUA,GAEfC,EAAU,SAACD,GACb,GAAU,MAAPA,EACC,OAAO,EACX,GAAkB,kBAARA,EACN,OAAO,EACX,IAAME,EAASC,OAAOD,OAAOF,GAE7B,OAAqB,IAAlBE,EAAOlB,QAAoD,IAApCmB,OAAOD,OAAOA,EAAO,IAAIlB,QAI5CkB,EAAOE,OAAM,SAAApF,GAAC,OAAKA,MAGxBqF,EAAc,SAAdA,EAAe9F,GACjB,OAAa,OAAVA,QAA4BgD,IAAVhD,EACV,KACS,mBAAVA,EACC,cAACN,EAAA,EAAKqG,MAAN,CAAYC,UAAQ,EAACC,QAASjG,EAAOF,KAAK,aAClD0F,EAAYxF,GACJ,cAAC,EAAD,CAAeoF,KAAOpF,EAAMoF,OAEnB,kBAAVpF,EACC8F,EAAYF,OAAOD,OAAO3F,GAAO,IAGpC,+BAAOA,EAAM8C,cAGzB,OACI,cAAC,WAAD,UACI,cAAC1C,EAAA,EAAD,UACI,iCHScc,EGPCyD,EAAMuB,SHQ7BhF,EAEG0E,OAAOO,KAAKjF,GAAQV,QAAO,SAAAC,GAAC,OAAKA,EAAE2F,SAAS,UAAQnF,KAAI,SAAAR,GAAO,MAAO,CAAE4F,IAAK5F,EAAGT,MAAQkB,EAAeT,OADnG,IGTgCQ,KAAI,SAAAqF,GAC3B,OACI,6BAEgC,kBAAhBA,EAAMtG,OAAqC,MAAfsG,EAAMtG,OAAkB0F,EAAQY,EAAMtG,OAwBpE,eAAC,WAAD,WACE,6BAAKkE,EAASoC,EAAMD,OACpB,6BACMP,EAAYQ,EAAMtG,YA1B1B,cAAC,WAAD,UAEMwF,EAAYc,EAAMtG,OACd,eAAC,WAAD,WACI,6BAAKkE,EAASoC,EAAMD,OACpB,6BAAI,cAAC,EAAD,CAAejB,KAAOkB,EAAMtG,MAAMoF,YAExC,oBAAImB,QAAS,EAAb,SACE,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACD,EAAA,EAAUE,OAAX,CAAkBC,GAAIF,IAAKG,OAAQC,SAAUP,EAAMD,IAAnD,SACMnC,EAASoC,EAAMD,OAErB,cAACG,EAAA,EAAUM,SAAX,CAAoBD,SAAUP,EAAMD,IAApC,SACI,cAACI,EAAA,EAAKM,KAAN,UACI,cAACxB,EAAD,CAAWW,SAAWI,EAAMtG,sBAlB/DsG,EAAMD,eCD5BW,MAvCf,WACI,MAAqBC,cAAfC,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,KACN9H,EAAUC,qBAAWV,GAC3B,EAA4BW,qBAA5B,mBAAO2B,EAAP,KAAekG,EAAf,KAEAtC,qBAAU,WACN,IAAMuC,EAAQhI,EAAQL,SAASwB,QAAO,SAAAC,GAAC,OAAIA,EAAEU,OAAS+F,KACtDE,EAAUD,EAAOE,EAAM9C,MAAK,SAAA9D,GAAC,OAAIA,EAAEC,OAASyG,KAAQE,EAAM9C,MAAK,SAAA+C,GAAC,OAAI,QACrE,CAACJ,EAAMC,EAAM9H,EAAQL,WAExB,IAMMuI,EAAe,SAACrG,EAAsCsG,GACxD,OAAItG,EAEIA,EAAesG,GAAW,GADvB,MAIf,OACI,cAAC,WAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAKb,SAAS,OAAOc,MAAM,SAA3B,SACI,cAAC,EAAD,CAAWzB,SAAWhF,MAhBtB,SAACA,GACb,OAAIA,EAEG0E,OAAOO,KAAKjF,GAAQV,QAAO,SAAAC,GAAC,OAAIA,EAAE2F,SAAS,UADvC,GAiBCwB,CAAQ1G,GAAQD,KAAI,SAAAuG,GAAS,OACzB,cAACE,EAAA,EAAD,CAAKb,SAAUW,EAAWG,MAAOH,EAAjC,SACI,cAAC,EAAD,CAAWtB,SAAUqB,EAAarG,EAAQsG,MADGA,Y,uECyD1DK,MAtFf,SAA2BlD,GACvB,IAAMmD,EAAY,IAGlB,EAAgCvI,mBAAmB,IAAnD,mBAAOwI,EAAP,KAAiBC,EAAjB,KACA,EAAgCzI,qBAAhC,mBAAO0I,EAAP,KAAiBC,EAAjB,KA8DA,OA5DApD,qBAAU,WACN,IAAMqD,EAAa,IAAIC,IAAMC,SAASC,MACtCH,EAAWI,qBAAoB,iBAAO,MAEtC,ILbqBzG,EK6Cf0G,GL7Ce1G,EK6CM6C,EAAMuB,SAASuC,UL1CvCC,KAAKC,MAAM7G,GADP,KK4CP,GAAY,MAAT0G,EAAH,CAKA,IAAIlC,EAAQpE,EAAcsG,EAAMI,YAChCtC,EAAQA,EAAM9C,OAAOtB,EAAcsG,EAAMK,YACnCjF,KAAK,CAAEhB,GAAI,MAAOc,OAAQ,IAAKC,OAAQ,MAC7CqE,EAzCiB,SAACD,GAA0C,IAAtBe,EAAqB,uDAAT,KACxCC,EAA6B,OAAdD,EAarB,OAZAX,EAAWa,SAAS,CAAEC,QAASH,IAE/Bf,EAASmB,SAAQ,SAACC,GACVC,YAAOD,GACPhB,EAAWkB,QAAQF,EAAGvG,GAAI,CAAE0G,MAAOxB,EAAWyB,OAf3C,KAiBHpB,EAAWqB,QAAQL,EAAGzF,OAAQyF,EAAGxF,WAIzCyE,IAAMqB,OAAOtB,GAENJ,EAAS9G,KAAI,SAACkI,GACjB,GAAIC,YAAOD,GAAK,CACZ,IAAMO,EAAmBvB,EAAWwB,KAAKR,EAAGvG,IAC5CuG,EAAGS,eAAiBb,EAAec,IAASC,KAAOD,IAASE,IAC5DZ,EAAGa,eAAiBjB,EAAec,IAASI,MAAQJ,IAASK,OAK7Df,EAAGlG,SAAW,CACVxC,EAAGiJ,EAAiBjJ,EAAIqH,GAAgBqC,KAAKC,SAAW,IACxD3H,EAAGiH,EAAiBjH,EAAI4H,IAGhC,OAAOlB,KAaHmB,CAAShE,SAPjB0B,EAAY,MAQjB,CAACrD,EAAMuB,SAASuC,WAef,eAAC8B,EAAA,EAAD,CAAK5K,MAAO,CAAE4J,OAAQ,QAAtB,UACI,cAACiB,EAAA,EAAD,UACI,cAAC,IAAD,CAAWzC,SAAWA,EAAW0C,gBAAgB,EAAOC,eAfhD,SAACxK,EAAwByC,GACzC,GAAG,SAAUA,EAAS,CAClB,IAAMR,EAAOQ,EAAQO,KAAKf,KACtBA,EAAKiB,gBACEjB,EAAKiB,eAETjB,EAAKY,gBACLZ,EAAKI,SACZ2F,EAAY/F,KAOR,SACI,cAAC,IAAD,QAGR,cAACqI,EAAA,EAAD,CAAKG,IAAE,EAACC,GAAI,EAAGjL,MAAO,CAAEkL,SAAU,SAAUC,UAAW,OAAQvB,OAAQ,OAAQwB,UAAW,aAA1F,SAEQ9C,EACI,cAAC,WAAD,UACI,cAAC,EAAD,CAAW/B,SAAW+B,MACZ,WCiBvB+C,MAjGf,WACI,IAAMpI,EAAOqE,cAAPrE,GACAvD,EAAUC,qBAAWV,GAC3B,EAAgCW,mBAA0B,MAA1D,mBAAO0L,EAAP,KAAiBC,EAAjB,KAQA,OANApG,qBAAU,WACN,IAAMqG,EAAM9L,EAAQN,UAAUwF,MAAK,SAAA9D,GAAC,OAAIA,EAAEoC,KAAOkB,OAAOnB,MACrDuI,GACCD,EAAYC,KACjB,CAACvI,EAAIvD,IAGJ,cAAC,WAAD,UAEQ4L,EACI,eAAC,WAAD,WACI,qBAAKtL,MAAO,CAAE4J,OAAQ,KAAtB,SACI,cAAC,EAAD,CAAmBrD,SAAW+E,MAElC,8BACI,cAAC7K,EAAA,EAAD,UACI,kCACA,+BACI,sCACA,6BAAM6K,EAASvK,UAEnB,+BACI,oCACA,6BAAMuK,EAASpI,QAEnB,+BACI,2CACA,6BACI,cAACnD,EAAA,EAAKqG,MAAN,CACIC,UAAQ,EACRC,QAASgF,EAASG,UAClBtL,KAAK,kBAIjB,+BACI,+CACA,6BACI,cAACJ,EAAA,EAAKqG,MAAN,CACIC,UAAQ,EACRC,QAASgF,EAASI,cAClBvL,KAAK,kBAIjB,+BACI,mDACA,6BACI,cAACJ,EAAA,EAAKqG,MAAN,CACIC,UAAQ,EACRC,QAASgF,EAASK,kBAClBxL,KAAK,kBAIjB,+BACI,4CACA,6BACI,cAACJ,EAAA,EAAKqG,MAAN,CACIC,UAAQ,EACRC,QAASgF,EAASM,WAClBzL,KAAK,kBAIjB,+BACI,qDACA,6BACI,cAACJ,EAAA,EAAKqG,MAAN,CACIC,UAAQ,EACRC,QAASgF,EAASO,oBAClB1L,KAAK,kBAIfmL,EAASQ,QAAQhH,OAAS,EACxB,6BACI,oBAAI8B,QAAS,EAAb,SACI,cAAC,EAAD,CAAWL,SAAU,CAAEuF,QAASR,EAASQ,eAEzC,eAMtB,QCrDPC,MA7Cf,WACI,IAAIvM,EAAQC,cACNC,EAAUC,qBAAWV,GAC3B,EAA4BW,mBAAiB,IAA7C,mBAAOC,EAAP,KAAeC,EAAf,KAMA,OACI,eAAC,WAAD,WACI,cAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,QAAS,IAAxB,SACI,cAACF,EAAA,EAAKG,QAAN,CAAcC,KAAK,SAASC,YAAY,YAAYC,MAAOR,EAAQS,SAP9D,SAACC,GACdT,EAAUS,EAAMC,cAAcH,YAQ1B,eAACI,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAA7B,UACI,gCACA,+BACI,sCACA,sCACA,4BAGJ,gCAEIlB,EAAQJ,YACHuB,QAAO,SAAAC,GAAC,OAAIA,EAAEC,KAAKC,cAAcC,SAASpB,EAAOmB,kBACjDE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEJ,KAAKM,cAAcD,EAAEL,SACtCO,KAAI,SAAAC,GACL,OACI,+BACI,6BAAMA,EAAOR,OACb,6BAAMQ,EAAOC,OACb,oBAAIxB,MAAO,CAAEyB,UAAW,UAAxB,SACI,cAAC,IAAD,CAAMC,GAAE,UAAOlC,EAAMmC,KAAb,YAAuBJ,EAAOC,MAAtC,SAAkD,WAJhDD,EAAOC,KAAOD,EAAOR,kBCH5CsG,MApBf,WACI,IAAME,EAASD,cAATC,KACA7H,EAAUC,qBAAWV,GAC3B,EAAoCW,qBAApC,mBAAOoM,EAAP,KAAmBC,EAAnB,KAOA,OALA9G,qBAAU,WACN,IAAM+G,EAAOxM,EAAQJ,YAAYsF,MAAK,SAAA9D,GAAC,OAAIA,EAAEU,OAAS+F,KACtD0E,EAAcC,KACf,CAAC3E,EAAM7H,EAAQJ,cAGd,cAAC,WAAD,UACI,cAACwI,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAKb,SAAS,OAAOc,MAAM,cAA3B,SACI,cAAC,EAAD,CAAWzB,SAAWyF,WC8B3BG,MA3Cf,WACE,OACI,cAAC,EAAD,UACI,eAAC,IAAD,CAAQC,SAAS,IAAjB,UACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,KAAxC,UACI,cAACH,EAAA,EAAOI,MAAR,6BACA,cAACJ,EAAA,EAAOnF,SAAR,CAAiBlE,GAAG,mBAApB,SACI,eAAC0J,EAAA,EAAD,CAAKC,UAAU,UAAf,UACI,cAACD,EAAA,EAAIE,KAAL,CAAU7F,GAAK8F,IAAUpL,GAAG,YAA5B,sBACA,cAACiL,EAAA,EAAIE,KAAL,CAAU7F,GAAK8F,IAAUpL,GAAG,gBAA5B,oCAKhB,cAAC2K,EAAA,EAAD,CAAWrM,MAAO,CAAEC,QAAS,IAA7B,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAO0B,KAAK,YAAYoL,OAAK,EAA7B,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOpL,KAAM,kBAAmBoL,OAAK,EAArC,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOpL,KAAM,wBAAb,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,gBAAgBoL,OAAK,EAAjC,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOpL,KAAM,sBAAuBoL,OAAK,EAAzC,SACI,cAACC,EAAD,MAEJ,cAAC,IAAD,CAAOrL,KAAM,iBAAb,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOsL,OAAQ,kBAAM,cAAC,IAAD,CAAUvL,GAAG,4BCvCxDwL,IAASD,OAAO,cAAC,EAAD,IACdE,SAASC,eAAe,W","file":"static/js/main.21c6ca68.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Store } from '../interfaces';\r\n\r\nconst Context = React.createContext<Store>({ behaviors: [], entities: [], dataObjects: [] });\r\n\r\nexport default Context;\r\n","import { Link, useRouteMatch } from \"react-router-dom\";\r\nimport Context from \"../../store/Context\";\r\nimport { FormEvent, Fragment, useContext, useState } from 'react';\r\nimport { Form, Table } from 'react-bootstrap';\r\n\r\nfunction EntityListing() {\r\n    let match = useRouteMatch();\r\n    const context = useContext(Context);\r\n    const [search, setSearch] = useState<string>(\"\");\r\n\r\n    const onSearch = (event: FormEvent<any>) => {\r\n        setSearch(event.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Form style={{ padding: 20 }}>\r\n                <Form.Control type=\"search\" placeholder=\"Search...\" value={search} onChange={onSearch}/>\r\n            </Form>\r\n            <Table striped bordered hover>\r\n                <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Guid</th>\r\n                    <th/>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {\r\n                    context.entities\r\n                        .filter(x => x.Name.toLowerCase().includes(search.toLowerCase()))\r\n                        .sort((a, b) => a.Name.localeCompare(b.Name))\r\n                        .map(entity => {\r\n                        return (\r\n                            <tr key={ entity.Guid + entity.Name }>\r\n                                <td>{ entity.Name }</td>\r\n                                <td>{ entity.Guid }</td>\r\n                                <td style={{ textAlign: 'center' }}>\r\n                                    <Link to={ `${ match.path }/${ entity.Guid }/${ entity.Name }` }>{ \"=>\" }</Link>\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    })\r\n                }\r\n                </tbody>\r\n            </Table>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default EntityListing\r\n","import { BehaviorTasks, Task } from '../interfaces';\r\nimport { Edge, FlowElement, Node, XYPosition } from 'react-flow-renderer/dist/types';\r\n\r\nexport async function get<T>(url: string) {\r\n    const response = await window.fetch(url, { method: 'GET' });\r\n    if(response.ok)\r\n        return await response.json() as T;\r\n    else\r\n        return Promise.reject(response.statusText);\r\n}\r\n\r\nexport function fromTaskJSON(json: string): BehaviorTasks {\r\n    if(!json)\r\n        return null;\r\n    return JSON.parse(json) as BehaviorTasks\r\n}\r\n\r\nexport function toFlowElement(task: Task, parent?: Task): FlowElement[] {\r\n    const parentOffset = parent != null ? fromOffset(parent.NodeData.Offset) : { x: 0, y: 0 };\r\n    const offset = fromOffset(task.NodeData.Offset);\r\n\r\n    const element: Node = {\r\n        id: task.ID.toString(),\r\n        type: task.Children ? undefined : 'output',\r\n        position: { x: parentOffset.x + offset.x, y: parentOffset.y + offset.y },\r\n        data: { label: task.Name, task: { Comment: task.NodeData.Comment, ...task } }\r\n    };\r\n\r\n    if(task.Type === \"BehaviorDesigner.Runtime.Tasks.EntryTask\")\r\n        element.type = 'input';\r\n\r\n    let ret: FlowElement[] = [element];\r\n    if(task.Children) {\r\n        for(const child of task.Children) {\r\n            ret = ret.concat(toFlowElement(child, task));\r\n            const edge: Edge = {\r\n                id: task.ID + '-' + child.ID,\r\n                source: task.ID.toString(),\r\n                target: child.ID.toString(),\r\n                type: 'smoothstep'\r\n            }\r\n            ret.push(edge);\r\n        }\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport function fromOffset(offset: string): XYPosition {\r\n    const split = offset\r\n        .replace('(', '')\r\n        .replace(')', '')\r\n        .split(',');\r\n    const x = Number.parseFloat(split[0]);\r\n    const y = Number.parseFloat(split[1]);\r\n    return { x, y };\r\n}\r\n\r\nexport function getEntries<T>(entity: T | null): { key: string, value: any }[] {\r\n    if(!entity)\r\n        return [];\r\n    return Object.keys(entity).filter(x => !x.endsWith(\"Ext\")).map(x => { return { key: x, value: (entity as any)[x] } });\r\n}\r\n\r\nconst types = [\r\n    \"SharedInt\",\r\n    \"SharedBool\",\r\n    \"SharedFloat\",\r\n    \"SharedEntity\",\r\n    \"SharedVector2\",\r\n    \"SharedVector3\",\r\n    \"SharedDataObject\",\r\n    \"SharedEntityList\",\r\n    \"SharedString\",\r\n    \"Boolean\",\r\n    \"String\",\r\n    \"Int32\",\r\n    \"Int64\",\r\n    \"Single\",\r\n    \"Entity\",\r\n    \"Vector2\",\r\n    \"Vector3\",\r\n    \"List\",\r\n    \"DataObject\",\r\n    \"Double\",\r\n    \"AbortType\"\r\n]\r\n\r\nexport function beautify(value: string): string {\r\n    let index = value.indexOf(\"m_\");\r\n    if(index > -1) {\r\n        value = value.substr(index + 2);\r\n        value = value[0].toUpperCase() + value.substr(1);\r\n    }\r\n    const type = types.find(x => value.startsWith(x));\r\n    if(type) {\r\n        value = value.substr(type.length);\r\n        value = value[0].toUpperCase() + value.substr(1);\r\n    }\r\n\r\n    return value;\r\n}\r\n","import Context from \"./Context\";\r\nimport { PropsWithChildren, useEffect, useState } from 'react';\r\nimport { Behavior, DataObject, EntityExt, Store } from '../interfaces';\r\nimport { get } from '../helpers';\r\n\r\nfunction Provider(props: PropsWithChildren<any>) {\r\n    const [store, setStore] = useState<Store>({ behaviors: [], entities: [], dataObjects: [] });\r\n\r\n    useEffect(() => {\r\n        async function fetch() {\r\n            if(store.entities.length > 0)\r\n                return;\r\n\r\n            const url = process.env.PUBLIC_URL;\r\n            const behaviors = await get<Behavior[]>(url + '/data/Behaviors.json');\r\n            const entities = await get<EntityExt[]>( url + '/data/Entities.json');\r\n            const dataObjects = await get<DataObject[]>(url + '/data/DataObjects.json');\r\n            setStore({ behaviors, entities, dataObjects });\r\n        }\r\n        fetch();\r\n    });\r\n\r\n    return (\r\n        <Context.Provider value={store}>{props.children}</Context.Provider>\r\n    )\r\n}\r\n\r\nexport default Provider;\r\n","import { Fragment, useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Context from '../../store/Context';\r\n\r\ntype Props = {\r\n    $Ref: string | number;\r\n}\r\n\r\nfunction ReferenceLink(props: Props) {\r\n    const context = useContext(Context);\r\n\r\n    const isGuid = !Number.isInteger(props.$Ref);\r\n    const isEntity = context.entities.some(x => x.Guid === props.$Ref);\r\n\r\n    let element;\r\n    if(isEntity) {\r\n        element = context.entities.find(x => x.Guid === props.$Ref);\r\n    } else {\r\n        element = context.dataObjects.find(x => x.Guid === props.$Ref);\r\n    }\r\n    if(!isGuid)\r\n        element = context.behaviors.find(x => x.ID === props.$Ref);\r\n\r\n    return (\r\n        <Fragment>\r\n            {\r\n                isGuid ?\r\n                    <Fragment>\r\n                        {\r\n                            isEntity ? <Link to={`/entities/${props.$Ref}`}>{element?.Name}</Link> : <Link to={`/data-objects/${props.$Ref}`}>{element?.Name}</Link>\r\n                        }\r\n                    </Fragment>\r\n                    : <Link to={`/behaviors/${props.$Ref}`}>{element?.Name}</Link>\r\n            }\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default ReferenceLink\r\n","import { Reference, ThorExt } from '../../../interfaces';\r\nimport { beautify, getEntries } from '../../../helpers';\r\nimport { Fragment } from 'react';\r\nimport { Accordion, Table, Card, Form } from 'react-bootstrap';\r\nimport ReferenceLink from '../ReferenceLink';\r\n\r\ntype Props = {\r\n    Instance: ThorExt | null\r\n}\r\n\r\nfunction Extension(props: Props) {\r\n    const isReference = (obj: any): obj is Reference => {\r\n        if(typeof obj !== 'object' || obj == null)\r\n            return false;\r\n        return '$Ref' in obj;\r\n    }\r\n    const isEmpty = (obj: any): boolean => {\r\n        if(obj == null)\r\n            return true;\r\n        if(typeof obj !== 'object')\r\n            return false;\r\n        const values = Object.values(obj);\r\n\r\n        if(values.length === 1 && Object.values(values[0]).length === 1) {\r\n            return true;\r\n        }\r\n\r\n        return values.every(x => !x);\r\n    }\r\n\r\n    const renderValue = (value: any) => {\r\n        if(value === null || value === undefined)\r\n            return null;\r\n        if(typeof value === 'boolean')\r\n            return <Form.Check disabled checked={value} type=\"checkbox\"/>\r\n        if(isReference(value)) {\r\n            return <ReferenceLink $Ref={ value.$Ref }/>;\r\n        }\r\n        if(typeof value === 'object') {\r\n            return renderValue(Object.values(value)[0]);\r\n        }\r\n\r\n        return (<span>{value.toString()}</span>)\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Table>\r\n                <tbody>\r\n                {\r\n                    getEntries(props.Instance).map(entry => {\r\n                        return (\r\n                            <tr key={entry.key}>\r\n                                {\r\n                                    (typeof entry.value === 'object' && entry.value != null && !isEmpty(entry.value) )\r\n                                        ? <Fragment>\r\n                                            {\r\n                                                isReference(entry.value) ?\r\n                                                    <Fragment>\r\n                                                        <td>{beautify(entry.key)}</td>\r\n                                                        <td><ReferenceLink $Ref={ entry.value.$Ref }/></td>\r\n                                                    </Fragment>\r\n                                                    : <td colSpan={2}>\r\n                                                        <Accordion>\r\n                                                            <Card>\r\n                                                                <Accordion.Toggle as={Card.Header} eventKey={entry.key}>\r\n                                                                    { beautify(entry.key) }\r\n                                                                </Accordion.Toggle>\r\n                                                                <Accordion.Collapse eventKey={entry.key}>\r\n                                                                    <Card.Body>\r\n                                                                        <Extension Instance={ entry.value as ThorExt }/>\r\n                                                                    </Card.Body>\r\n                                                                </Accordion.Collapse>\r\n                                                            </Card>\r\n                                                        </Accordion>\r\n                                                    </td>\r\n                                            }\r\n                                        </Fragment>\r\n                                        : <Fragment>\r\n                                            <td>{beautify(entry.key)}</td>\r\n                                            <td>\r\n                                                { renderValue(entry.value) }\r\n                                            </td>\r\n                                        </Fragment>\r\n                                }\r\n                            </tr>\r\n                        )\r\n                    })\r\n                }\r\n                </tbody>\r\n            </Table>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Extension\r\n","import { Fragment, useContext, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Tab, Tabs } from 'react-bootstrap';\r\nimport Context from '../../store/Context';\r\nimport { EntityExt, ThorExt } from '../../interfaces';\r\nimport Extension from './Extensions/Extension';\r\n\r\ntype Params = {\r\n    guid: string\r\n    name: string\r\n}\r\n\r\nfunction Entity() {\r\n    let { guid, name } = useParams<Params>();\r\n    const context = useContext(Context);\r\n    const [entity, setEntity] = useState<EntityExt | null>();\r\n\r\n    useEffect(() => {\r\n        const items = context.entities.filter(x => x.Guid === guid);\r\n        setEntity(name ? items.find(x => x.Name === name) : items.find(_ => true));\r\n    }, [guid, name, context.entities])\r\n\r\n    const getTabs = (entity: EntityExt | null | undefined): string[] => {\r\n        if(!entity)\r\n            return [];\r\n        return Object.keys(entity).filter(x => x.endsWith(\"Ext\"));\r\n    }\r\n\r\n    const getComponent = (entity: EntityExt | null | undefined, component: string): ThorExt | null => {\r\n        if(!entity)\r\n            return null;\r\n        return (entity as any)[component][0];\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Tabs>\r\n                <Tab eventKey=\"root\" title=\"Entity\">\r\n                    <Extension Instance={ entity as any }/>\r\n                </Tab>\r\n                {\r\n                    getTabs(entity).map(component => (\r\n                        <Tab eventKey={component} title={component} key={component}>\r\n                            <Extension Instance={getComponent(entity, component)}/>\r\n                        </Tab>\r\n                    ))\r\n                }\r\n            </Tabs>\r\n        </Fragment>\r\n    );\r\n}\r\nexport default Entity;\r\n","import { Behavior } from '../../interfaces';\r\nimport ReactFlow, { Background, Elements, isNode, Position } from 'react-flow-renderer';\r\nimport { fromTaskJSON, toFlowElement } from '../../helpers';\r\nimport { Fragment, MouseEvent as ReactMouseEvent, useEffect, useState } from 'react';\r\nimport dagre from 'dagre';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { Edge, Node } from 'react-flow-renderer/dist/types';\r\nimport Extension from '../Entity/Extensions/Extension';\r\n\r\ntype Props = {\r\n    Instance: Behavior\r\n}\r\n\r\nfunction BehaviorTreeGraph(props: Props) {\r\n    const nodeWidth = 172;\r\n    const nodeHeight = 36;\r\n\r\n    const [elements, setElements] = useState<Elements>([]);\r\n    const [selected, setSelected] = useState<Node | null>();\r\n\r\n    useEffect(() => {\r\n        const dagreGraph = new dagre.graphlib.Graph();\r\n        dagreGraph.setDefaultEdgeLabel(() => ({}));\r\n\r\n        const doLayout = (elements: Elements, direction = 'TB') => {\r\n            const isHorizontal = direction === 'LR';\r\n            dagreGraph.setGraph({ rankdir: direction });\r\n\r\n            elements.forEach((el) => {\r\n                if (isNode(el)) {\r\n                    dagreGraph.setNode(el.id, { width: nodeWidth, height: nodeHeight });\r\n                } else {\r\n                    dagreGraph.setEdge(el.source, el.target);\r\n                }\r\n            });\r\n\r\n            dagre.layout(dagreGraph);\r\n\r\n            return elements.map((el) => {\r\n                if (isNode(el)) {\r\n                    const nodeWithPosition = dagreGraph.node(el.id);\r\n                    el.targetPosition = isHorizontal ? Position.Left : Position.Top;\r\n                    el.sourcePosition = isHorizontal ? Position.Right : Position.Bottom;\r\n\r\n                    // unfortunately we need this little hack to pass a slightly different position\r\n                    // to notify react flow about the change. Moreover we are shifting the dagre node position\r\n                    // (anchor=center center) to the top left so it matches the react flow node anchor point (top left).\r\n                    el.position = {\r\n                        x: nodeWithPosition.x - nodeWidth / 2 + Math.random() / 1000,\r\n                        y: nodeWithPosition.y - nodeHeight / 2,\r\n                    };\r\n                }\r\n                return el;\r\n            });\r\n        }\r\n\r\n        const tasks = fromTaskJSON(props.Instance.TaskJSON);\r\n        if(tasks == null) {\r\n            setElements([]);\r\n            return;\r\n        }\r\n\r\n        let entry = toFlowElement(tasks.EntryTask);\r\n        entry = entry.concat(toFlowElement(tasks.RootTask));\r\n        entry.push({ id: '0-1', source: '0', target: '1' });\r\n        setElements(doLayout(entry));\r\n    }, [props.Instance.TaskJSON]);\r\n\r\n    const onNodeClick = (event: ReactMouseEvent, element: Node | Edge) => {\r\n        if('data' in element) {\r\n            const task = element.data.task;\r\n            if(!task.Comment)\r\n                delete task.Comment;\r\n\r\n            delete task.Children;\r\n            delete task.NodeData;\r\n            setSelected(task);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Row style={{ height: '100%'}}>\r\n            <Col>\r\n                <ReactFlow elements={ elements } nodesDraggable={false} onElementClick={onNodeClick}>\r\n                    <Background/>\r\n                </ReactFlow>\r\n            </Col>\r\n            <Col xs lg={5} style={{ overflow: \"hidden\", overflowY: \"auto\", height: \"100%\", wordBreak: \"break-all\" }}>\r\n                {\r\n                    selected ?\r\n                        <Fragment>\r\n                            <Extension Instance={ selected as any }/>\r\n                        </Fragment> : null\r\n                }\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default BehaviorTreeGraph;\r\n","import { useParams } from 'react-router-dom';\r\nimport { useContext, useEffect, useState, Fragment } from 'react';\r\nimport Context from '../../store/Context';\r\nimport { Behavior } from '../../interfaces';\r\nimport BehaviorTreeGraph from './BehaviorTreeGraph';\r\nimport Extension from '../Entity/Extensions/Extension';\r\nimport { Form, Table } from 'react-bootstrap';\r\n\r\ntype Params = {\r\n    id: string\r\n}\r\n\r\nfunction BehaviorTree() {\r\n    let { id } = useParams<Params>();\r\n    const context = useContext(Context);\r\n    const [behavior, setBehavior] = useState<Behavior | null>(null);\r\n\r\n    useEffect(() => {\r\n        const tmp = context.behaviors.find(x => x.ID === Number(id));\r\n        if(tmp)\r\n            setBehavior(tmp);\r\n    }, [id, context]);\r\n\r\n    return (\r\n        <Fragment>\r\n            {\r\n                behavior ?\r\n                    <Fragment>\r\n                        <div style={{ height: 400 }}>\r\n                            <BehaviorTreeGraph Instance={ behavior }/>\r\n                        </div>\r\n                        <div>\r\n                            <Table>\r\n                                <tbody>\r\n                                <tr>\r\n                                    <td>Name</td>\r\n                                    <td>{ behavior.Name }</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>ID</td>\r\n                                    <td>{ behavior.ID }</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>AutoStart</td>\r\n                                    <td>\r\n                                        <Form.Check\r\n                                            disabled\r\n                                            checked={behavior.AutoStart}\r\n                                            type=\"checkbox\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Interruptable</td>\r\n                                    <td>\r\n                                        <Form.Check\r\n                                            disabled\r\n                                            checked={behavior.Interruptable}\r\n                                            type=\"checkbox\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>PauseWhenDisabled</td>\r\n                                    <td>\r\n                                        <Form.Check\r\n                                            disabled\r\n                                            checked={behavior.PauseWhenDisabled}\r\n                                            type=\"checkbox\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>PreProcess</td>\r\n                                    <td>\r\n                                        <Form.Check\r\n                                            disabled\r\n                                            checked={behavior.PreProcess}\r\n                                            type=\"checkbox\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>RestartWhenComplete</td>\r\n                                    <td>\r\n                                        <Form.Check\r\n                                            disabled\r\n                                            checked={behavior.RestartWhenComplete}\r\n                                            type=\"checkbox\"\r\n                                        />\r\n                                    </td>\r\n                                </tr>\r\n                                { behavior.Objects.length > 0 ?\r\n                                    <tr>\r\n                                        <td colSpan={2}>\r\n                                            <Extension Instance={{ Objects: behavior.Objects }}/>\r\n                                        </td>\r\n                                    </tr> : null\r\n                                }\r\n                                </tbody>\r\n                            </Table>\r\n                        </div>\r\n                    </Fragment>\r\n                    : null\r\n            }\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default BehaviorTree\r\n","import { Link, useRouteMatch } from \"react-router-dom\";\r\nimport Context from \"../../store/Context\";\r\nimport { FormEvent, Fragment, useContext, useState } from 'react';\r\nimport { Form, Table } from 'react-bootstrap';\r\n\r\nfunction DataObjectListing() {\r\n    let match = useRouteMatch();\r\n    const context = useContext(Context);\r\n    const [search, setSearch] = useState<string>(\"\");\r\n\r\n    const onSearch = (event: FormEvent<any>) => {\r\n        setSearch(event.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <Form style={{ padding: 20 }}>\r\n                <Form.Control type=\"search\" placeholder=\"Search...\" value={search} onChange={onSearch}/>\r\n            </Form>\r\n            <Table striped bordered hover>\r\n                <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Guid</th>\r\n                    <th/>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {\r\n                    context.dataObjects\r\n                        .filter(x => x.Name.toLowerCase().includes(search.toLowerCase()))\r\n                        .sort((a, b) => a.Name.localeCompare(b.Name))\r\n                        .map(entity => {\r\n                        return (\r\n                            <tr key={ entity.Guid + entity.Name }>\r\n                                <td>{ entity.Name }</td>\r\n                                <td>{ entity.Guid }</td>\r\n                                <td style={{ textAlign: 'center' }}>\r\n                                    <Link to={ `${ match.path }/${ entity.Guid }` }>{ \"=>\" }</Link>\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    })\r\n                }\r\n                </tbody>\r\n            </Table>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default DataObjectListing\r\n","import { Fragment, useContext, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Tab, Tabs } from 'react-bootstrap';\r\nimport Context from '../../store/Context';\r\nimport { DataObject } from '../../interfaces';\r\nimport Extension from '../Entity/Extensions/Extension';\r\n\r\ntype Params = {\r\n    guid: string\r\n}\r\n\r\nfunction Entity() {\r\n    let { guid } = useParams<Params>();\r\n    const context = useContext(Context);\r\n    const [dataObject, setDataObject] = useState<DataObject | null>();\r\n\r\n    useEffect(() => {\r\n        const item = context.dataObjects.find(x => x.Guid === guid);\r\n        setDataObject(item);\r\n    }, [guid, context.dataObjects])\r\n\r\n    return (\r\n        <Fragment>\r\n            <Tabs>\r\n                <Tab eventKey=\"root\" title=\"Data Object\">\r\n                    <Extension Instance={ dataObject as any }/>\r\n                </Tab>\r\n            </Tabs>\r\n        </Fragment>\r\n    );\r\n}\r\nexport default Entity;\r\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route, NavLink, Redirect } from \"react-router-dom\";\n\nimport './App.css';\nimport EntityListing from './components/EntityListing/EntityListing';\nimport Provider from './store/Provider';\nimport Entity from './components/Entity/Entity';\nimport { Container, Navbar, Nav } from 'react-bootstrap';\nimport BehaviorTree from './components/BehaviorTree/BehaviorTree';\nimport DataObjectListing from './components/DataObjectListing/DataObjectListing';\nimport DataObject from './components/DataObject/DataObject';\n\nfunction App() {\n  return (\n      <Provider>\n          <Router basename='/'>\n              <Container>\n                  <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n                      <Navbar.Brand>Undermine Data</Navbar.Brand>\n                      <Navbar.Collapse id=\"basic-navbar-nav\">\n                          <Nav className=\"mr-auto\">\n                              <Nav.Link as={ NavLink } to=\"/entities\">Entities</Nav.Link>\n                              <Nav.Link as={ NavLink } to=\"/data-objects\">Data Objects</Nav.Link>\n                          </Nav>\n                      </Navbar.Collapse>\n                  </Navbar>\n              </Container>\n              <Container style={{ padding: 10 }}>\n                  <Switch>\n                      <Route path='/entities' exact>\n                          <EntityListing/>\n                      </Route>\n                      <Route path={'/entities/:guid'} exact>\n                          <Entity />\n                      </Route>\n                      <Route path={'/entities/:guid/:name'}>\n                          <Entity />\n                      </Route>\n                      <Route path='/data-objects' exact>\n                          <DataObjectListing/>\n                      </Route>\n                      <Route path={'/data-objects/:guid'} exact>\n                          <DataObject />\n                      </Route>\n                      <Route path={'/behaviors/:id'}>\n                          <BehaviorTree />\n                      </Route>\n                      <Route render={() => <Redirect to=\"/entities\" />} />\n                  </Switch>\n              </Container>\n          </Router>\n      </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport './bootstrap.min.css';\n\nimport App from './App';\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}